events {
    worker_connections 1024;
}

http {
    upstream app_backend {
        # Primary server - will fail over to backup on errors
        server blue_app:${PORT} max_fails=2 fail_timeout=5s;
        
        # Backup server - only used when primary fails
        server green_app:${PORT} backup;
    }

    # Custom log format to track upstream responses
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr status: $upstream_status '
                    'response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    # Fast failure detection settings
    proxy_connect_timeout 2s;
    proxy_send_timeout 5s;
    proxy_read_timeout 5s;
    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 10s;

    server {
        listen 80;
        
        # Main service endpoint
        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Ensure app headers are passed through
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            
            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }
    }
}